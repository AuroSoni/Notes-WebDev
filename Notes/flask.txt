1. Python commands:
  i)  print("Hello")
  ii) name=input()
  iii)print(f"Hello {name}!")

  Python Comments:
  - # :single line comments
  - """ : multiline comments ends with : """
2. Data types(automatic assignment):
   i=28
   f=2.8
   b=True            //T must be capital
   n=None            //N must be capital
3. Conditional statements(indentation is necessary):
   x=28
   if x>0:
      print("x is positive")
   elif x<0:
      print("x is negative")
   else:
      print("x is zero")
4. Sequences:
   name = "Alice"       //char array
   coordinates = (10.0, 20.0)     //tuple: groups 2 values
   names = ["Alice", "Bob", "Charlie"]  //python list: Can contain different types
   //ACCESS:
   name[0]
   coordinates[0]
   names[0]
5. Loops:
   for i in range(5):
      print(i)                   //prints 0-4 on each line
   for name in names:
      print(name)                //Loops within a sequence
6. Sets(no data repetition allowed):   //don't preserve order of info
   s= set()
   s.add(1)
   s.add(3)
   s.add(1)
   print(s)                   //{1,3}
7. Dictionaries(Mapping values):
   ages = {"Alice": 22, "Bob": 27}  //maps keys to values
   ages["Charlie"] = 30             //adds the element
   ages["Alice"] += 1
   print(ages)            //{'Alice': 23, 'Bob': 27, 'Charlie': 30}
8. Functions:
   def square(x):
      return x*x
   for i in range(10):
      print("{} squared is {}".format(i,square(i)))  //an older way of formatting
9. Exceptions:
    -Name error   //if name is undefined
    -Index error     //in arrays
10. Importing from other files:
    from <filename> import <function-name>
    //If you don't want imported file to run use this:
    def main():
      ...
    if __name__ == "__main__":
      main()
11. Classes in python:
    class Point:
      def __init__(self,x,y):     //acts like a constructor
        self.x = x                //self is object reference
        self.y = y
    p = Point(3,5)
    print(p.x)
    print(p.y)
12. Flask is a micro-framework written in python.
    -flask code for your website is gen stored in a file called application.py
    -you have to install the flask module.
    -written in terms of routes.
    -eg:
      from flask import flask

      //makes this file(__name__) a flask application
      app = Flask(__name__)

      @app.route("/")   //"/" represents the default page // called a decorator
      def index():      //tied to the default route
        return "Hello, world!" //can include html code in return string
13. Setting flask environment variable and the venv:

    -env\Scripts\activate   //backslash is imp

    -set FLASK_APP=application.py

    -flask debug mode: dynamically updates the website:
    set FLASK_ENV=development

14. Adding variable routes:
    @app.route("/<string:name>")
    def hello(name):
      return f"Hello, {name}"
15. Rendering html files:
    -include:
      from flask import Flask, render_template
    -in the routed function return this:
      return render_template("index.html")
    //!!!!!!! the file "index.html" should be in a neighboring
    //directory templates of the application.py
16. Adding variables:
    @app.route("/")
    def index():
    headline = "Hello, world!"
    return render_template("index.html", headline=headline)
    //the lvalue headline is variable ref used in the html file

    Inside html file:
    <h1>{{ headline }}</h1>
    //ginger 2 syntax

17. python datetime module:

    import datetime

    -using datetime:
    now = datetime.datetime.now()
    day = now.day
    month = now.month

18. ginger 2 conditions in html:

    {% if boolean_var %}
      ...html tags and content
    {% else %}
      ...
    {% endif %}

19. ginger 2 loops in html:

    {% for name in names %}
      ...
      {{ name }}
      ...
    {% endfor %}

20. ginger 2 hyperlinks in html:

    <a href="{{ url_for('another_route') }}">Go to another_route</a>
    //!! links to the function another_route. The route can be
    changed without affecting it.

22. Template inheritance using ginger2:

    -In the basic template replace modifiable templates as such:
    <body>
      <h1>{% block heading %}{% endblock %}</h1>
      {% block body %}
      {% endblock %}
      ..
      more blocks can be included
      ..
    </body>
    -In the derived file do this:
    {% extends "base.html" %}   #line-1
    {% block heading %}
      ..content
    {% endblock %}
    {% block body %}
    ..can include anything a normal html does
    {% endblock %}
23. Submitting forms (posting data):
    -The default http protocol method is 'get'
    -We need 'post' method to submit data to the server.
    -html form example:
    <form action="{{ url_for('hello') }}" method="post">
      <input type="text" name="name" placeholder="Enter your Name">
      <button>Submit</button>
      //Dbt: is this tag not allowed attributes
      //On clicking submit the hello() is executed.
      //You can submit the form by using get method too
      //but then the input field is displayed in the url
    </form>
    -in application.py:
    from flask import FLASK, render_template, request
    ...
    @app.route("/hello", methods=["POST"])
    def hello():
      name = request.form.get("name")
      return render_template("hello.html", name=name)
    #If you directly go to the hello route you get a "Method Not Allowed"
    #If "GET" is also added to the list you get a "Hello None" on the Page
    #ie. name = None by default
    #To avoid such behavior you can do this:
      if request.method=="GET":
        return "Please fill the form first!"
24. Sessions:
    -imports:
      from flask import session
      from flask_session import Session
    -Config:
      app.config["SESSION_PERMANENT"] = False
      app.config["SESSION_TYPE"] = "filesystem"

      Session(app)
    -Usage:
    @app.route("/", methods=["GET", "POST"])
    def index():
        if(session.get("notes") is None):
            session["notes"] = []
        if request.method == "POST":
            note = request.form.get("note")
            session["notes"].append(note)

        return render_template("index_sessions.html", notes = session["notes"])
